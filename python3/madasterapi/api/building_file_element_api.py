"""
    Madaster Private API - Build: 

    Welcome to the **Madaster Private API** endpoint. This endpoint can be used to interact with the Madaster Platform and its resources. This API does not fully cover all functionality of the platform yet, please see below for the available functions and what they can be used for. For detailed information about the platform and this API, please refer to the [Madaster Documentation](https://docs.madaster.com) or the [Madaster API Documentation](https://docs.madaster.com/api).<br/><br/>To access these resources, you need an authorization token. If you do not have one yet, see the chapter about Authorization in the [API documentation](https://docs.madaster.com/api). This token should be sent as a header with the name 'X-API-Key', which will authenticate the request with the token. The documentation below specifies which requests are available and which responses they might produce.<br/><br/>This API can be reached at the endpoint: **[https://api.madaster.com/](https://api.madaster.com/)**<br/>The interactive Swagger/OpenAPI documentation can be found at: **[https://api.madaster.com/](https://api.madaster.com/)**<br/>If you prefer a static documentation: **[https://docs.madaster.com/api-docs](https://docs.madaster.com/api-docs)**  # noqa: E501

    The version of the OpenAPI document: v3.0
    Contact: service@madaster.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from madasterapi.api_client import ApiClient, Endpoint as _Endpoint
from madasterapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from madasterapi.model.building_file_element_request import BuildingFileElementRequest
from madasterapi.model.building_file_element_response import BuildingFileElementResponse
from madasterapi.model.element_batch_result import ElementBatchResult


class BuildingFileElementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __building_file_element_add_element(
            self,
            building_id,
            file_id,
            **kwargs
        ):
            """Create a new building file element  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_element_add_element(building_id, file_id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                file_id (str): The file identifier

            Keyword Args:
                building_file_element_request (BuildingFileElementRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileElementResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['file_id'] = \
                file_id
            return self.call_with_http_info(**kwargs)

        self.building_file_element_add_element = _Endpoint(
            settings={
                'response_type': (BuildingFileElementResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{fileId}/elements',
                'operation_id': 'building_file_element_add_element',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'file_id',
                    'building_file_element_request',
                ],
                'required': [
                    'building_id',
                    'file_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'file_id':
                        (str,),
                    'building_file_element_request':
                        (BuildingFileElementRequest,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'file_id': 'fileId',
                },
                'location_map': {
                    'building_id': 'path',
                    'file_id': 'path',
                    'building_file_element_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__building_file_element_add_element
        )

        def __building_file_element_delete_element(
            self,
            building_id,
            file_id,
            id,
            **kwargs
        ):
            """Deletes an existing building file element  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_element_delete_element(building_id, file_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                file_id (str): The file identifier
                id (str, none_type): The element identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['file_id'] = \
                file_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_element_delete_element = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{fileId}/elements/{id}',
                'operation_id': 'building_file_element_delete_element',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'file_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'file_id',
                    'id',
                ],
                'nullable': [
                    'id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'file_id':
                        (str,),
                    'id':
                        (str, none_type,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'file_id': 'fileId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'file_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_element_delete_element
        )

        def __building_file_element_get_element_by_id(
            self,
            building_id,
            file_id,
            id,
            **kwargs
        ):
            """Gets a building file element  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_element_get_element_by_id(building_id, file_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                file_id (str): The file identifier
                id (str, none_type): The element identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileElementResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['file_id'] = \
                file_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_element_get_element_by_id = _Endpoint(
            settings={
                'response_type': (BuildingFileElementResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{fileId}/elements/{id}',
                'operation_id': 'building_file_element_get_element_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'file_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'file_id',
                    'id',
                ],
                'nullable': [
                    'id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'file_id':
                        (str,),
                    'id':
                        (str, none_type,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'file_id': 'fileId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'file_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_element_get_element_by_id
        )

        def __building_file_element_get_elements(
            self,
            building_id,
            file_id,
            **kwargs
        ):
            """Gets a building file's elements  # noqa: E501

            This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_element_get_elements(building_id, file_id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                file_id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [BuildingFileElementResponse]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['file_id'] = \
                file_id
            return self.call_with_http_info(**kwargs)

        self.building_file_element_get_elements = _Endpoint(
            settings={
                'response_type': ([BuildingFileElementResponse],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{fileId}/elements',
                'operation_id': 'building_file_element_get_elements',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'file_id',
                ],
                'required': [
                    'building_id',
                    'file_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'file_id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'file_id': 'fileId',
                },
                'location_map': {
                    'building_id': 'path',
                    'file_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_element_get_elements
        )

        def __building_file_element_update_element(
            self,
            building_id,
            file_id,
            id,
            **kwargs
        ):
            """Updated an existing building file element  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_element_update_element(building_id, file_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                file_id (str): The file identifier
                id (str, none_type): The element identifier

            Keyword Args:
                building_file_element_request (BuildingFileElementRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileElementResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['file_id'] = \
                file_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_element_update_element = _Endpoint(
            settings={
                'response_type': (BuildingFileElementResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{fileId}/elements/{id}',
                'operation_id': 'building_file_element_update_element',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'file_id',
                    'id',
                    'building_file_element_request',
                ],
                'required': [
                    'building_id',
                    'file_id',
                    'id',
                ],
                'nullable': [
                    'id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'file_id':
                        (str,),
                    'id':
                        (str, none_type,),
                    'building_file_element_request':
                        (BuildingFileElementRequest,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'file_id': 'fileId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'file_id': 'path',
                    'id': 'path',
                    'building_file_element_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__building_file_element_update_element
        )

        def __building_file_element_upsert_elements(
            self,
            building_id,
            file_id,
            **kwargs
        ):
            """Batch: upsert (insert or update) multiple new building file elements (max 500)  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_element_upsert_elements(building_id, file_id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                file_id (str): The file identifier

            Keyword Args:
                building_file_element_request ([BuildingFileElementRequest], none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ElementBatchResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['file_id'] = \
                file_id
            return self.call_with_http_info(**kwargs)

        self.building_file_element_upsert_elements = _Endpoint(
            settings={
                'response_type': (ElementBatchResult,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{fileId}/elements/batch',
                'operation_id': 'building_file_element_upsert_elements',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'file_id',
                    'building_file_element_request',
                ],
                'required': [
                    'building_id',
                    'file_id',
                ],
                'nullable': [
                    'building_file_element_request',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'file_id':
                        (str,),
                    'building_file_element_request':
                        ([BuildingFileElementRequest], none_type,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'file_id': 'fileId',
                },
                'location_map': {
                    'building_id': 'path',
                    'file_id': 'path',
                    'building_file_element_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__building_file_element_upsert_elements
        )
