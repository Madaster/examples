"""
    Madaster Private API - Build: 

    Welcome to the **Madaster Private API** endpoint. This endpoint can be used to interact with the Madaster Platform and its resources. This API does not fully cover all functionality of the platform yet, please see below for the available functions and what they can be used for. For detailed information about the platform and this API, please refer to the [Madaster Documentation](https://docs.madaster.com) or the [Madaster API Documentation](https://docs.madaster.com/api).<br/><br/>To access these resources, you need an authorization token. If you do not have one yet, see the chapter about Authorization in the [API documentation](https://docs.madaster.com/api). This token should be sent as a header with the name 'X-API-Key', which will authenticate the request with the token. The documentation below specifies which requests are available and which responses they might produce.<br/><br/>This API can be reached at the endpoint: **[https://api.madaster.com/](https://api.madaster.com/)**<br/>The interactive Swagger/OpenAPI documentation can be found at: **[https://api.madaster.com/](https://api.madaster.com/)**<br/>If you prefer a static documentation: **[https://docs.madaster.com/api-docs](https://docs.madaster.com/api-docs)**  # noqa: E501

    The version of the OpenAPI document: v3.0
    Contact: service@madaster.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from madasterapi.api_client import ApiClient, Endpoint as _Endpoint
from madasterapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from madasterapi.model.building_file_request import BuildingFileRequest
from madasterapi.model.building_file_response import BuildingFileResponse
from madasterapi.model.building_file_status_response import BuildingFileStatusResponse
from madasterapi.model.file_download_response import FileDownloadResponse


class BuildingFileApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __building_file_add_file(
            self,
            building_id,
            **kwargs
        ):
            """Adds a building file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_add_file(building_id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier

            Keyword Args:
                building_file_request (BuildingFileRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            return self.call_with_http_info(**kwargs)

        self.building_file_add_file = _Endpoint(
            settings={
                'response_type': (BuildingFileResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files',
                'operation_id': 'building_file_add_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'building_file_request',
                ],
                'required': [
                    'building_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'building_file_request':
                        (BuildingFileRequest,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                },
                'location_map': {
                    'building_id': 'path',
                    'building_file_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__building_file_add_file
        )

        def __building_file_delete_file(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Delete a building file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_delete_file(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_delete_file = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}',
                'operation_id': 'building_file_delete_file',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_delete_file
        )

        def __building_file_download(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Gets a download url for the building file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_download(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FileDownloadResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_download = _Endpoint(
            settings={
                'response_type': (FileDownloadResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}/download',
                'operation_id': 'building_file_download',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_download
        )

        def __building_file_get_file_by_id(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Gets a building file by its identifier  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_get_file_by_id(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_get_file_by_id = _Endpoint(
            settings={
                'response_type': (BuildingFileResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}',
                'operation_id': 'building_file_get_file_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_get_file_by_id
        )

        def __building_file_get_files(
            self,
            building_id,
            **kwargs
        ):
            """Gets all building files  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_get_files(building_id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [BuildingFileResponse]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            return self.call_with_http_info(**kwargs)

        self.building_file_get_files = _Endpoint(
            settings={
                'response_type': ([BuildingFileResponse],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files',
                'operation_id': 'building_file_get_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                ],
                'required': [
                    'building_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                },
                'location_map': {
                    'building_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_get_files
        )

        def __building_file_get_status_by_id(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Gets a building file status by its identifier  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_get_status_by_id(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileStatusResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_get_status_by_id = _Endpoint(
            settings={
                'response_type': (BuildingFileStatusResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}/status',
                'operation_id': 'building_file_get_status_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_get_status_by_id
        )

        def __building_file_set_active(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Activates or deactivates a building file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_set_active(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                body (bool): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildingFileResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_set_active = _Endpoint(
            settings={
                'response_type': (BuildingFileResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}/active',
                'operation_id': 'building_file_set_active',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                    'body',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                    'body':
                        (bool,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__building_file_set_active
        )

        def __building_file_set_importing(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Sets the status of a file to 'importing', so element can be added or updated can be made.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_set_importing(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_set_importing = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}/setimporting',
                'operation_id': 'building_file_set_importing',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_set_importing
        )

        def __building_file_start_refinement(
            self,
            building_id,
            id,
            **kwargs
        ):
            """Starts the refinement of a building file.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_start_refinement(building_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.building_file_start_refinement = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}/startrefinement',
                'operation_id': 'building_file_start_refinement',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                ],
                'required': [
                    'building_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__building_file_start_refinement
        )

        def __building_file_upload_file(
            self,
            building_id,
            id,
            file_name,
            body,
            **kwargs
        ):
            """Uploads a building file.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.building_file_upload_file(building_id, id, file_name, body, async_req=True)
            >>> result = thread.get()

            Args:
                building_id (str): The building identifier
                id (str): The file identifier
                file_name (str, none_type): The file name
                body (file_type):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['building_id'] = \
                building_id
            kwargs['id'] = \
                id
            kwargs['file_name'] = \
                file_name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.building_file_upload_file = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/building/{buildingId}/files/{id}/upload/{fileName}',
                'operation_id': 'building_file_upload_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_id',
                    'id',
                    'file_name',
                    'body',
                ],
                'required': [
                    'building_id',
                    'id',
                    'file_name',
                    'body',
                ],
                'nullable': [
                    'file_name',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_id':
                        (str,),
                    'id':
                        (str,),
                    'file_name':
                        (str, none_type,),
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                    'building_id': 'buildingId',
                    'id': 'id',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'building_id': 'path',
                    'id': 'path',
                    'file_name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/octet-stream'
                ]
            },
            api_client=api_client,
            callable=__building_file_upload_file
        )
