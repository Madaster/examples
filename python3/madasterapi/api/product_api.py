"""
    Madaster Private API - Build: 

    Welcome to the **Madaster Private API** endpoint. This endpoint can be used to interact with the Madaster Platform and its resources. This API does not fully cover all functionality of the platform yet, please see below for the available functions and what they can be used for. For detailed information about the platform and this API, please refer to the [Madaster Documentation](https://docs.madaster.com) or the [Madaster API Documentation](https://docs.madaster.com/api).<br/><br/>To access these resources, you need an authorization token. If you do not have one yet, see the chapter about Authorization in the [API documentation](https://docs.madaster.com/api). This token should be sent as a header with the name 'X-API-Key', which will authenticate the request with the token. The documentation below specifies which requests are available and which responses they might produce.<br/><br/>This API can be reached at the endpoint: **[https://api.madaster.com/](https://api.madaster.com/)**<br/>The interactive Swagger/OpenAPI documentation can be found at: **[https://api.madaster.com/](https://api.madaster.com/)**<br/>If you prefer a static documentation: **[https://docs.madaster.com/api-docs](https://docs.madaster.com/api-docs)**  # noqa: E501

    The version of the OpenAPI document: v3.0
    Contact: service@madaster.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from madasterapi.api_client import ApiClient, Endpoint as _Endpoint
from madasterapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from madasterapi.model.matching_criterion import MatchingCriterion
from madasterapi.model.product_child import ProductChild
from madasterapi.model.product_request import ProductRequest
from madasterapi.model.product_response import ProductResponse


class ProductApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __product_add_child(
            self,
            database_id,
            id,
            **kwargs
        ):
            """Adds a child for a product.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_add_child(database_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier

            Keyword Args:
                product_child (ProductChild): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProductChild
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.product_add_child = _Endpoint(
            settings={
                'response_type': (ProductChild,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/children',
                'operation_id': 'product_add_child',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'product_child',
                ],
                'required': [
                    'database_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'product_child':
                        (ProductChild,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'product_child': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__product_add_child
        )

        def __product_add_match(
            self,
            database_id,
            id,
            **kwargs
        ):
            """Adds a matchingcriterion to a material/product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_add_match(database_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier

            Keyword Args:
                matching_criterion (MatchingCriterion): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MatchingCriterion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.product_add_match = _Endpoint(
            settings={
                'response_type': (MatchingCriterion,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/matches',
                'operation_id': 'product_add_match',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'matching_criterion',
                ],
                'required': [
                    'database_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'matching_criterion':
                        (MatchingCriterion,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'matching_criterion': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__product_add_match
        )

        def __product_add_product(
            self,
            database_id,
            **kwargs
        ):
            """Create a new product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_add_product(database_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier

            Keyword Args:
                product_request (ProductRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProductResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            return self.call_with_http_info(**kwargs)

        self.product_add_product = _Endpoint(
            settings={
                'response_type': (ProductResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}',
                'operation_id': 'product_add_product',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'product_request',
                ],
                'required': [
                    'database_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'product_request':
                        (ProductRequest,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                },
                'location_map': {
                    'database_id': 'path',
                    'product_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__product_add_product
        )

        def __product_delete_child(
            self,
            database_id,
            id,
            child_id,
            **kwargs
        ):
            """Deleted a child from a product.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_delete_child(database_id, id, child_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier
                child_id (str): The material/product identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProductChild
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            kwargs['child_id'] = \
                child_id
            return self.call_with_http_info(**kwargs)

        self.product_delete_child = _Endpoint(
            settings={
                'response_type': (ProductChild,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/children/{childId}',
                'operation_id': 'product_delete_child',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'child_id',
                ],
                'required': [
                    'database_id',
                    'id',
                    'child_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'child_id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                    'child_id': 'childId',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'child_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_delete_child
        )

        def __product_delete_match(
            self,
            database_id,
            id,
            match_id,
            **kwargs
        ):
            """Deletes a matchingcriterion for a material/product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_delete_match(database_id, id, match_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier
                match_id (str): The match identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            kwargs['match_id'] = \
                match_id
            return self.call_with_http_info(**kwargs)

        self.product_delete_match = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/matches/{matchId}',
                'operation_id': 'product_delete_match',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'match_id',
                ],
                'required': [
                    'database_id',
                    'id',
                    'match_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'match_id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                    'match_id': 'matchId',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'match_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_delete_match
        )

        def __product_get_children(
            self,
            database_id,
            id,
            **kwargs
        ):
            """Gets the children of a product.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_get_children(database_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProductChild]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.product_get_children = _Endpoint(
            settings={
                'response_type': ([ProductChild],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/children',
                'operation_id': 'product_get_children',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                ],
                'required': [
                    'database_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_get_children
        )

        def __product_get_match_by_id(
            self,
            database_id,
            id,
            match_id,
            **kwargs
        ):
            """Gets a specific matching criteria for a material/product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_get_match_by_id(database_id, id, match_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier
                match_id (str): The match identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [MatchingCriterion]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            kwargs['match_id'] = \
                match_id
            return self.call_with_http_info(**kwargs)

        self.product_get_match_by_id = _Endpoint(
            settings={
                'response_type': ([MatchingCriterion],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/matches/{matchId}',
                'operation_id': 'product_get_match_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'match_id',
                ],
                'required': [
                    'database_id',
                    'id',
                    'match_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'match_id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                    'match_id': 'matchId',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'match_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_get_match_by_id
        )

        def __product_get_matches(
            self,
            database_id,
            id,
            **kwargs
        ):
            """Gets the matching criteria for a material/product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_get_matches(database_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [MatchingCriterion]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.product_get_matches = _Endpoint(
            settings={
                'response_type': ([MatchingCriterion],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/matches',
                'operation_id': 'product_get_matches',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                ],
                'required': [
                    'database_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_get_matches
        )

        def __product_get_product_by_id(
            self,
            database_id,
            id,
            **kwargs
        ):
            """Gets a product by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_get_product_by_id(database_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The product identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProductResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.product_get_product_by_id = _Endpoint(
            settings={
                'response_type': (ProductResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}',
                'operation_id': 'product_get_product_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                ],
                'required': [
                    'database_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_get_product_by_id
        )

        def __product_get_products(
            self,
            database_id,
            **kwargs
        ):
            """Gets all products from a database  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_get_products(database_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProductResponse]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            return self.call_with_http_info(**kwargs)

        self.product_get_products = _Endpoint(
            settings={
                'response_type': ([ProductResponse],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}',
                'operation_id': 'product_get_products',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                ],
                'required': [
                    'database_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                },
                'location_map': {
                    'database_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__product_get_products
        )

        def __product_update_child(
            self,
            database_id,
            id,
            child_id,
            **kwargs
        ):
            """Updates a child for a product.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_update_child(database_id, id, child_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier
                child_id (str): The material/product identifier

            Keyword Args:
                product_child (ProductChild): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProductChild
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            kwargs['child_id'] = \
                child_id
            return self.call_with_http_info(**kwargs)

        self.product_update_child = _Endpoint(
            settings={
                'response_type': (ProductChild,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/children/{childId}',
                'operation_id': 'product_update_child',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'child_id',
                    'product_child',
                ],
                'required': [
                    'database_id',
                    'id',
                    'child_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'child_id':
                        (str,),
                    'product_child':
                        (ProductChild,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                    'child_id': 'childId',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'child_id': 'path',
                    'product_child': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__product_update_child
        )

        def __product_update_match(
            self,
            database_id,
            id,
            match_id,
            **kwargs
        ):
            """Updates a matchingcriterion for a material/product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_update_match(database_id, id, match_id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The material/product identifier
                match_id (str): The match identifier

            Keyword Args:
                matching_criterion (MatchingCriterion): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MatchingCriterion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            kwargs['match_id'] = \
                match_id
            return self.call_with_http_info(**kwargs)

        self.product_update_match = _Endpoint(
            settings={
                'response_type': (MatchingCriterion,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}/matches/{matchId}',
                'operation_id': 'product_update_match',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'match_id',
                    'matching_criterion',
                ],
                'required': [
                    'database_id',
                    'id',
                    'match_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'match_id':
                        (str,),
                    'matching_criterion':
                        (MatchingCriterion,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                    'match_id': 'matchId',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'match_id': 'path',
                    'matching_criterion': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__product_update_match
        )

        def __product_update_product(
            self,
            database_id,
            id,
            **kwargs
        ):
            """Update an existing product  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.product_update_product(database_id, id, async_req=True)
            >>> result = thread.get()

            Args:
                database_id (str): The database identifier
                id (str): The product identifier

            Keyword Args:
                product_request (ProductRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProductResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['database_id'] = \
                database_id
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.product_update_product = _Endpoint(
            settings={
                'response_type': (ProductResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3.0/product/{databaseId}/{id}',
                'operation_id': 'product_update_product',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'database_id',
                    'id',
                    'product_request',
                ],
                'required': [
                    'database_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'database_id':
                        (str,),
                    'id':
                        (str,),
                    'product_request':
                        (ProductRequest,),
                },
                'attribute_map': {
                    'database_id': 'databaseId',
                    'id': 'id',
                },
                'location_map': {
                    'database_id': 'path',
                    'id': 'path',
                    'product_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__product_update_product
        )
